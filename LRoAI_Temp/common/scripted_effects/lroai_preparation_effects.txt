# A huge mess of different stuff combined together for performance reasons mostly in a form of
# reducing calls of stuff like every_scope_state and every_scope_building to the minimum possible.
lroai_collect_data_for_construction_and_downsizing = {

    every_scope_state = {
        
        # Base for available workforce is unemployed population, subsistence buildings are added later
        set_variable = {
            name = lroai_available_workforce
            value = lroai_unemployed_population
        }

        # Variables used in downsizing only
        set_variable = {
            name = lroai_building_government_administration_level
            value = 0
        }
        set_variable = {
            name = lroai_building_construction_sector_level
            value = 0
        }
        set_variable = {
            name = lroai_building_port_level
            value = 0
        }
        set_variable = {
            name = lroai_building_barracks_level
            value = 0
        }
        set_variable = {
            name = lroai_building_naval_base_level
            value = 0
        }
    }
    
    lroai_calculate_country_median_construction_efficiency = yes

    every_scope_building = {
        limit = {
            level > 0 # Active buildings only
        }

        lroai_add_peasants_to_available_workforce = yes
        lroai_renew_cooldowns_and_calculate_gov_building_level = yes
    }
    
    # Calculate unutilized workforce
    set_variable = {
        name = lroai_available_workforce_country
        value = 0
    }
    every_scope_state = {
        root = {
            change_variable = {
                name = lroai_available_workforce_country
                add = {
                    value = prev.lroai_available_workforce
                }
            }
        }
    }

    lroai_calculate_country_median_building_productivity = yes

    lroai_perform_for_every_building_type = {
        effect = 1 # lroai_collect_data_for_all_buildings_of_type
    }
}

# ---------------------------------------------------------------------------------------------------------------------
# Array variable lroai_building_type_X_collected_data is widely used below, where X is id of building type in question.
# Search for "Cell distribution of lroai_building_type_X_collected_data array variable" in lroai_preparation_values.txt
# ---------------------------------------------------------------------------------------------------------------------

# If workforce is true, calculate shortages, profitability, productivity and check if building is excessive
lroai_collect_data_for_all_buildings_of_type = {

    # Set up building counter variable
    set_local_variable = {
        name = lroai_num_buildings_of_current_type
        value = 0
    }

    # Get every building of the type in the country
    every_scope_building = {
        limit = {
            is_building_type = $key$
        }

        # Remove level 0 buildings that are not under construction as it's just a junk that happens to survive
        if = {
            limit = {
                level <= 0
                is_under_construction = no
            }
            state = {
                remove_building = $key$
            }
        }
        else = {

            # Add ongoing constructions to counter
            lroai_add_ongoing_constructions_to_counter = {
                id = $id$
                counter = $counter$
            }

            # Further data collection makes sense only for active buildings
            if = {
                limit = {
                    level > 0
                    lroai_occupied_levels > 0
                    state.market_access >= 0.80
                }
                # Add the building to the list of current type to perform country scope calculations later
                root = {
                    change_local_variable = {
                        name = lroai_num_buildings_of_current_type
                        add = 1
                    }
                    add_to_variable_list = {
                        name = lroai_buildings_of_current_type
                        target = prev
                    }
                }
            }
        }
    }


    if = {
        limit = {
            local_var:lroai_num_buildings_of_current_type > 0
        }

        set_local_variable = {
            name = lroai_num_buildings_of_current_type
            value = {
                value = local_var:lroai_num_buildings_of_current_type
                divide = 2
                floor = yes
            }
        }

        # Productivity (with economy of scale removed!)
        ordered_in_list = {
            variable = lroai_buildings_of_current_type
            order_by = lroai_productivity_without_scaling
            position = local_var:lroai_num_buildings_of_current_type
            root = {
                set_variable = {
                    name = lroai_building_type_$id$_collected_data
                    value = {
                        value = prev.lroai_productivity_without_scaling
                        multiply = 10
                        floor = yes
                        max = 9998
                        multiply = 100
                    }
                }
            }
        }
    }
    remove_local_variable = lroai_num_buildings_of_current_type
    clear_variable_list = lroai_buildings_of_current_type
}

# Add the number of levels currently under construction to counter in array variable of the building type
lroai_add_ongoing_constructions_to_counter = {

    # Only if the building is actually under construction
    if = {
        limit = {
            is_under_construction = yes
        }

        # We can't check number of levels under construction natively, so the script includes custom tracking solution.
        # Get count from array variables of the required building type in ongoing construction list if they exist.
        state = {
            every_in_list = {
                variable = lroai_ongoing_constructions
                limit = {
                    lroai_current_ongoing_constructions_element_1 = $id$
                }
                lroai_add_to_local_variable = {
                    name = lroai_total_constructions
                    value = lroai_current_ongoing_constructions_element_4
                }
            }
        }

        # If we found something in the list of ongoing constructions, add it to counter, otherwise just add 1
        root = {
            if = {
                limit = {
                    has_local_variable = lroai_total_constructions
                }
                lroai_add_to_building_type_counter = {
                    counter = $counter$
                    value = local_var:lroai_total_constructions
                }
                remove_local_variable = lroai_total_constructions
            }
            else = {
                lroai_add_to_building_type_counter = {
                    counter = $counter$
                    value = 1
                }
            }
        }
    }
}


# Collect coastlines of market capital and outer lands
lroai_collect_coastlines_of_market_capital_and_overseas_lands = {
    if = {
        limit = {
            any_scope_state = {
                is_coastal = yes
            }
        }

        # Only market owners can have market capital coastlines, for junior partners everything is overseas lands
        if = {
            limit = {
                market.owner = root
            }

            # Set up market capital as input state
            market_capital = {
                root = {
                    add_to_variable_list = {
                        name = lroai_current_ring_of_states
                        target = prev
                    }
                }
            }

            # Get list of all states connected to market capital by land
            lroai_collect_states_of_same_owner_connected_by_land = yes

            # Out of connected states take all the coastal ones to form market capital coastline list
            every_in_list = {
                variable = lroai_states_connected_to_input
                if = {
                    limit = {
                        is_coastal = yes
                    }
                    root = {
                        add_to_variable_list = {
                            name = lroai_states_of_market_capital_coastline
                            target = prev
                        }
                    }
                }
            }

            # Set up variable with number of states of market capital coastline which is needed for port conditions
            set_variable = {
                name = lroai_num_states_of_market_capital_coastline
                value = 0
            }
            every_in_list = {
                variable = lroai_states_of_market_capital_coastline
                root = {
                    change_variable = {
                        name = lroai_num_states_of_market_capital_coastline
                        add = 1
                    }
                }
            }

            # Garbage collection
            clear_variable_list = lroai_states_connected_to_input
        }

        # Every coastal state that does not belong to market capital coastline is a part of overseas lands
        every_scope_state = {
            limit = {
                is_coastal = yes
                root = {
                    NOT = {
                        lroai_is_target_in_variable_list = {
                            name = lroai_states_of_market_capital_coastline
                            target = prev
                        }
                    }
                }
            }
            root = {
                add_to_variable_list = {
                    name = lroai_coastline_of_overseas_lands
                    target = prev
                }

                # Create a list of states in overseas lands where it is safe to delete ports, meaning states that are
                # connected by land to some other state with port and thus they won't lose market access if their ports
                # will be deleted, which is absolutely critical to track for decision making regarding port downsizing.
                if = {
                    limit = {
                        prev.var:lroai_building_port_level > 0
                        NOT = {
                            lroai_is_target_in_variable_list = {
                                name = lroai_safe_to_delete_ports_in_overseas_lands
                                target = prev
                            }
                        }
                    }

                    # Set up a state with port as input
                    add_to_variable_list = {
                        name = lroai_current_ring_of_states
                        target = prev
                    }

                    # Get list of all states connected to this state by land
                    lroai_collect_states_of_same_owner_connected_by_land = yes

                    # If there are some states with ports in output list, all of them are considered safe to delete.
                    # Note that downsizing script only deletes one port at time; if this will be changed, you'll need
                    # to add additional tracking to avoid deleting multiple ports that rely on each other to be safe.
                    if = {
                        limit = {
                            any_in_list = {
                                variable = lroai_states_connected_to_input
                                var:lroai_building_port_level > 0
                                count > 1
                            }
                        }
                        every_in_list = {
                            variable = lroai_states_connected_to_input
                            if = {
                                limit = {
                                    var:lroai_building_port_level > 0
                                }
                                root = {
                                    add_to_variable_list = {
                                        name = lroai_safe_to_delete_ports_in_overseas_lands
                                        target = prev
                                    }
                                }
                            }
                        }
                    }

                    # Garbage collection
                    clear_variable_list = lroai_states_connected_to_input
                }
            }
        }
    }
}

# Gets any amount of states as input in form of lroai_current_ring_of_states variable list, creates an output variable
# list named lroai_states_connected_to_input that contains all the states of the same owner that are connected by land
# through other states of this same owner to any of states from input. Don't forget about garbage collection of output.
lroai_collect_states_of_same_owner_connected_by_land = {
    while = {
        limit = {
            lroai_has_variable_list = {
                name = lroai_current_ring_of_states
            }
        }
        random_in_list = {
            variable = lroai_current_ring_of_states
            root = {
                add_to_variable_list = {
                    name = lroai_states_connected_to_input
                    target = prev
                }
            }
            every_neighbouring_state = {
                limit = {
                    owner = root
                    root = {
                        NOR = {
                            lroai_is_target_in_variable_list = {
                                name = lroai_states_connected_to_input
                                target = prev
                            }
                            lroai_is_target_in_variable_list = {
                                name = lroai_current_ring_of_states
                                target = prev
                            }
                            lroai_is_target_in_variable_list = {
                                name = lroai_waiting_ring_of_states
                                target = prev
                            }
                        }
                    }
                }
                root = {
                    add_to_variable_list = {
                        name = lroai_waiting_ring_of_states
                        target = prev
                    }
                }
            }
            root = {
                remove_list_variable = {
                    name = lroai_current_ring_of_states
                    target = prev
                }
                if = {
                    limit = {
                        NOT = {
                            lroai_has_variable_list = {
                                name = lroai_current_ring_of_states
                            }
                        }
                    }
                    if = {
                        limit = {
                            lroai_has_variable_list = {
                                name = lroai_waiting_ring_of_states
                            }
                        }
                        every_in_list = {
                            variable = lroai_waiting_ring_of_states
                            root = {
                                add_to_variable_list = {
                                    name = lroai_current_ring_of_states
                                    target = prev
                                }
                            }
                        }
                        clear_variable_list = lroai_waiting_ring_of_states
                    }
                    else = {
                        clear_variable_list = lroai_current_ring_of_states
                    }
                }
            }
        }
    }
}


lroai_calculate_country_median_building_productivity = {

    # Set up variables for median productivity and profitability
    set_variable = {
        name = lroai_median_building_productivity
        value = 0
    }

    # Set variables to track lists of values
    set_local_variable = {
        name = lroai_num_productivity_values
        value = 0
    }

    # Add positive values of production building to lists. Non-positive productivity and profitability are ignored,
    # as these medians are used only to evaluate if a new building is worthy of being constructed, if it will be on
    # par and competitive in general economy of a country, so we want to compare it only against other productive
    # buildings, thus non-positive productivity and profitability values are excluded from median calculations.
    every_scope_building = {
        limit = {
            lroai_occupied_levels > 0
            is_subsistence_building = no
            is_government_funded = no
            NOR = {
                is_building_group = bg_trade
                is_building_group = bg_service
                is_building_group = bg_monuments
                is_building_group = bg_monuments_hidden
            }
        }

        # Productivity
        if = {
            limit = {
                earnings > 0
            }
            root = {

                # You can't add same value to a list multiple times, so we add id to it that we'll throw away later
                set_local_variable = {
                    name = lroai_formatted_productivity
                    value = {
                        value = prev.earnings
                        multiply = 100
                        floor = yes
                        max = 99999
                        multiply = 10000
                        add = {
                            value = local_var:lroai_num_productivity_values
                            divide = 100
                        }
                    }
                }

                # Productivity value of a building is added to the list once for every X levels of this buildings,
                # as we actually want to get median productivity of building level rather than entire building, but
                # it would be a bit too expensive, thus we use some divisor that doesn't affect results too much.
                set_local_variable = {
                    name = lroai_num_times_to_add_value_to_list
                    value = {
                        value = prev.lroai_occupied_levels
                        divide = 4
                    }
                }
                while = {
                    limit = {
                        local_var:lroai_num_times_to_add_value_to_list > 0
                    }
                    add_to_variable_list = {
                        name = lroai_productivity_values
                        target = local_var:lroai_formatted_productivity
                    }
                    change_local_variable = {
                        name = lroai_formatted_productivity
                        add = 0.01
                    }
                    change_local_variable = {
                        name = lroai_num_productivity_values
                        add = 1
                    }
                    change_local_variable = {
                        name = lroai_num_times_to_add_value_to_list
                        subtract = 1
                    }
                }
                remove_local_variable = lroai_formatted_productivity
                remove_local_variable = lroai_num_times_to_add_value_to_list
            }
        }
    }

    # Find median productivity
    if = {
        limit = {
            local_var:lroai_num_productivity_values > 0
        }
        set_local_variable = {
            name = lroai_num_productivity_values
            value = {
                value = local_var:lroai_num_productivity_values
                divide = 2
                floor = yes
            }
        }
        ordered_in_list = {
            variable = lroai_productivity_values
            order_by = this
            position = local_var:lroai_num_productivity_values
            root = {
                set_variable = {
                    name = lroai_median_building_productivity
                    value = {
                        value = prev
                        divide = 10000
                        floor = yes
                        divide = 100
                    }
                }
            }
        }
    }
    clear_variable_list = lroai_productivity_values
    remove_local_variable = lroai_num_productivity_values
}


lroai_renew_cooldowns_and_calculate_gov_building_level = {

    # Government administration
    if = {
        limit = {
            is_building_type = building_government_administration
        }
        root = {

            # Renew cooldown if there's government administration under construction
            if = {
                limit = {
                    has_variable = lroai_building_government_administration_cooldown
                    prev = {
                        is_under_construction = yes
                    }
                }
                lroai_renew_variable = {
                    name = lroai_building_government_administration_cooldown
                    days = lroai_days_in_building_cooldown
                }
            }
        }

        # Add level to state scope variable
        state = {
            change_variable = {
                name = lroai_building_government_administration_level
                add = prev.level
            }
        }
    }

    # University
    else_if = {
        limit = {
            is_building_type = building_university
        }
        root = {
            if = {
                limit = {
                    has_variable = lroai_building_university_cooldown
                    prev = {
                        is_under_construction = yes
                    }
                }
                lroai_renew_variable = {
                    name = lroai_building_university_cooldown
                    days = lroai_days_in_building_cooldown
                }
            }
        }
    }

    # Construction sector
    else_if = {
        limit = {
            is_building_type = building_construction_sector
        }
        state = {
            change_variable = {
                name = lroai_building_construction_sector_level
                add = prev.level
            }
        }
    }

    # Railway
    else_if = {
        limit = {
            is_building_type = building_railway
        }
        # Nothing as of now
    }

    # Port
    else_if = {
        limit = {
            is_building_type = building_port
        }
        root = {
            if = {
                limit = {
                    has_variable = lroai_building_port_cooldown
                    prev = {
                        is_under_construction = yes
                    }
                }
                lroai_renew_variable = {
                    name = lroai_building_port_cooldown
                    days = lroai_days_in_building_cooldown
                }
            }
        }
        state = {
            change_variable = {
                name = lroai_building_port_level
                add = prev.level
            }
        }
    }

    # Naval base
    else_if = {
        limit = {
            is_building_type = building_naval_base
        }
        root = {
            if = {
                limit = {
                    has_variable = lroai_building_naval_base_cooldown
                    prev = {
                        is_under_construction = yes
                    }
                }
                lroai_renew_variable = {
                    name = lroai_building_naval_base_cooldown
                    days = lroai_days_in_building_cooldown
                }
            }
        }
        state = {
            change_variable = {
                name = lroai_building_naval_base_level
                add = prev.level
            }
        }
    }

    # Barracks
    else_if = {
        limit = {
            is_building_type = building_barracks
        }
        root = {
            if = {
                limit = {
                    has_variable = lroai_building_barracks_cooldown
                    prev = {
                        is_under_construction = yes
                    }
                }
                lroai_renew_variable = {
                    name = lroai_building_barracks_cooldown
                    days = lroai_days_in_building_cooldown
                }
            }
        }
        state = {
            change_variable = {
                name = lroai_building_barracks_level
                add = prev.level
            }
        }
    }
}

lroai_add_peasants_to_available_workforce = {
    # Add occupation of subsistence building to available workforce in its state
    if = {
        limit = {
            is_subsistence_building = yes
        }
        state = {
            change_variable = {
                name = lroai_available_workforce
                add = {
                    value = prev.lroai_occupied_levels
                    if = {
                        limit = {
                            prev = {
                                is_building_type = building_subsistence_rice_paddies
                            }
                        }
                        multiply = 9750
                    }
                    else = {
                        multiply = 4750
                    }
                }
            }
        }
    }
}


lroai_calculate_country_median_construction_efficiency = {

    # Set up variables to calculate median construction efficiency
    set_local_variable = {
        name = lroai_num_construction_efficiency_values
        value = 0
    }

    every_scope_state = {
        
            # To calculate median construction efficiency a value of the state is added to the list multiple times
            # depending on how big it is, so that small states have much less influence on the median.
            set_local_variable = {
                name = lroai_state_weight_in_construction
                value = {
                    value = state_population
                    divide = 200000
                    floor = yes
                    add = 1
                }
            }
            while = {
                limit = {
                    local_var:lroai_state_weight_in_construction > 0
                }
    
                # You can't add same value to a list multiple times, so we add id to it that we'll throw away later
                set_local_variable = {
                    name = lroai_state_construction_efficiency
                    value = {
                        value = modifier:state_construction_mult
                        add = 1
                        min = define:NEconomy|MIN_CONSTRUCTION_EFFICIENCY
                        multiply = 1000
                        round = yes
                        max = 21460
                        multiply = 100000
                        add = {
                            value = local_var:lroai_num_construction_efficiency_values
                            divide = 100
                        }
                    }
                }
                add_to_local_variable_list = {
                    name = lroai_construction_efficiency_values
                    target = local_var:lroai_state_construction_efficiency
                }
                change_local_variable = {
                    name = lroai_num_construction_efficiency_values
                    add = 1
                }
                change_local_variable = {
                    name = lroai_state_weight_in_construction
                    subtract = 1
                }
            }
        }
    
        # Get median value from the list of construction efficiency values
        if = {
            limit = {
                local_var:lroai_num_construction_efficiency_values > 0
            }
            set_local_variable = {
                name = lroai_num_construction_efficiency_values
                value = {
                    value = local_var:lroai_num_construction_efficiency_values
                    divide = 2
                    floor = yes
                }
            }
            ordered_in_local_list = {
                variable = lroai_construction_efficiency_values
                order_by = this
                position = local_var:lroai_num_construction_efficiency_values
                root = {
                    set_variable = {
                        name = lroai_median_construction_efficiency
                        value = {
                            value = prev
                            divide = 100000
                            floor = yes
                            divide = 100
                        }
                    }
                }
            }
        }
        remove_local_variable = lroai_num_construction_efficiency_values
        clear_local_variable_list = lroai_construction_efficiency_values
}