# ---------------------------------------------------------------------------------------------------------------------
# Array variable lroai_building_type_X_collected_data is widely used below, where X is id of building type in question.
# Search for "Cell distribution of lroai_building_type_X_collected_data array variable" in lroai_preparation_values.txt
# ---------------------------------------------------------------------------------------------------------------------

# Perform evaluation and write result to variables, then check states for allocation
lroai_check_priority_of_building = {
    if = {

        # Only perform evaluation if...
        limit = {

            # ...a country should consider constructing this building...
            lroai_consider_$key$ = {
                id = $id$
            }

            # ...and the number of ongoing constructions of its building type is lower than max potential limit
            OR = {
                NOT = {
                    has_variable = lroai_building_type_$counter$_collected_data
                }
                lroai_building_type_$counter$_collected_data_5 < lroai_construction_limit_$limit$_1
            }
        }

        # Perform evaluation using static data set specifically for this building type in its own effect
        lroai_evaluate_$key$ = {
            id = $id$
        }
    }

    # If building evaluation is not allowed, but building type variable exists, ensure it contains only counter
    else_if = {
        limit = {
            has_variable = lroai_building_type_$id$_collected_data
        }
        set_variable = {
            name = lroai_building_type_$id$_collected_data
            value = {
                value = lroai_building_type_$id$_collected_data_5
                multiply = 10000000
            }
        }
    }

    # For building types that use critical construction we need to ensure their variable exists, even if it's just 0
    if = {
        limit = {
            OR = {
                $id$ = 1 # Government administration
                $id$ = 3 # Construction sector
                $id$ = 5 # Port
            }
            NOT = {
                has_variable = lroai_building_type_$id$_collected_data
            }
        }
        set_variable = {
            name = lroai_building_type_$id$_collected_data
            value = 0
        }
    }
    lroai_perform_allocation = {
        id = $id$
        key = $key$
        counter = $counter$
        limit = $limit$
        allocate = $allocate$
    }
}

lroai_perform_allocation = {
    # If building type has some priority, perform allocation, checking which states are best suitable for construction
    if = {
        limit = {
            has_variable = lroai_building_type_$id$_collected_data
            lroai_building_type_$id$_collected_data_1 > 0
        }

        # But only if its counter is within limit, as it's first time we have the data to check it properly
        if = {
            limit = {
                lroai_check_if_counter_is_within_limit = {
                    id = $id$
                    counter = $counter$
                    limit = $limit$
                }
            }

            # Check every state that has required basic variables
            every_scope_state = {
                limit = {
                    has_variable = lroai_available_workforce
                    state_region = {
                        has_variable = lroai_available_agriculture_resources
                    }
                }

                # If this state...
                if = {
                    limit = {

                        # ...meets basic requirements for this building type to get constructed...
                        lroai_sanction_$key$ = yes

                        # ...and is suitable
                        OR = {
                            lroai_has_enough_infrastructure = yes
                            $id$ = 4
                            $id$ = 5
                        }
                        lroai_has_enough_workforce = yes
                    }

                    # ...then check it for every condition set in allocate trigger from static data of this building
                    # type, and add the state into a corresponding allocation list if it meets requirements in trigger.
                    if = { limit = { $allocate$ >= 1 lroai_allocate_$key$ = { aptitude = 1 } } root = {
                    add_to_variable_list = { name = lroai_building_type_$id$_allocation_1 target = prev } } }
                    else_if = { limit = { $allocate$ >= 2 lroai_allocate_$key$ = { aptitude = 2 } } root = {
                    add_to_variable_list = { name = lroai_building_type_$id$_allocation_2 target = prev } } }
                    else_if = { limit = { $allocate$ >= 3 lroai_allocate_$key$ = { aptitude = 3 } } root = {
                    add_to_variable_list = { name = lroai_building_type_$id$_allocation_3 target = prev } } }
                    else_if = { limit = { $allocate$ >= 4 lroai_allocate_$key$ = { aptitude = 4 } } root = {
                    add_to_variable_list = { name = lroai_building_type_$id$_allocation_4 target = prev } } }
                    else_if = { limit = { $allocate$ >= 5 lroai_allocate_$key$ = { aptitude = 5 } } root = {
                    add_to_variable_list = { name = lroai_building_type_$id$_allocation_5 target = prev } } }
                    else_if = { limit = { $allocate$ >= 6 lroai_allocate_$key$ = { aptitude = 6 } } root = {
                    add_to_variable_list = { name = lroai_building_type_$id$_allocation_6 target = prev } } }
                    else_if = { limit = { $allocate$ >= 7 lroai_allocate_$key$ = { aptitude = 7 } } root = {
                    add_to_variable_list = { name = lroai_building_type_$id$_allocation_7 target = prev } } }
                    else_if = { limit = { $allocate$ >= 8 lroai_allocate_$key$ = { aptitude = 8 } } root = {
                    add_to_variable_list = { name = lroai_building_type_$id$_allocation_8 target = prev } } }
                    else_if = { limit = { $allocate$ >= 9 lroai_allocate_$key$ = { aptitude = 9 } } root = {
                    add_to_variable_list = { name = lroai_building_type_$id$_allocation_9 target = prev } } }
                    else_if = { limit = { $allocate$ >= 10 lroai_allocate_$key$ = { aptitude = 10 } } root = {
                    add_to_variable_list = { name = lroai_building_type_$id$_allocation_10 target = prev } } }
                }
            }

            # If no allocation lists were formed, no state can host this building
            if = {
                limit = {
                    NOR = {
                        lroai_has_variable_list = {
                            name = lroai_building_type_$id$_allocation_1
                        }
                        lroai_has_variable_list = {
                            name = lroai_building_type_$id$_allocation_2
                        }
                        lroai_has_variable_list = {
                            name = lroai_building_type_$id$_allocation_3
                        }
                        lroai_has_variable_list = {
                            name = lroai_building_type_$id$_allocation_4
                        }
                        lroai_has_variable_list = {
                            name = lroai_building_type_$id$_allocation_5
                        }
                        lroai_has_variable_list = {
                            name = lroai_building_type_$id$_allocation_6
                        }
                        lroai_has_variable_list = {
                            name = lroai_building_type_$id$_allocation_7
                        }
                        lroai_has_variable_list = {
                            name = lroai_building_type_$id$_allocation_8
                        }
                        lroai_has_variable_list = {
                            name = lroai_building_type_$id$_allocation_9
                        }
                        lroai_has_variable_list = {
                            name = lroai_building_type_$id$_allocation_10
                        }
                    }
                }

                # Thus we set building type priority to 0 so it won't be processed
                change_variable = {
                    name = lroai_building_type_$id$_collected_data
                    subtract = {
                        value = lroai_building_type_$id$_collected_data_1
                        divide = 100
                    }
                }
            }
        }

        # If blocked by counter, set building type priority to 0 so it won't be processed
        else = {
            change_variable = {
                name = lroai_building_type_$id$_collected_data
                subtract = {
                    value = lroai_building_type_$id$_collected_data_1
                    divide = 100
                }
            }
        }
    }
}

# Used by government building-specific evaluation
lroai_evaluate_with_custom_trigger = {

    # Start with priority 1
    set_local_variable = {
        name = lroai_current_priority
        value = 1
    }

    # Try every priority until we find a fitting one
    while = {
        limit = {
            NOT = {
                has_local_variable = lroai_break_evaluation
            }
            lroai_current_priority <= 12 # Highest present in government triggers
        }
        if = {
            limit = {

                # We're forced to make key-id pairs cause dynamic name leads to a billion startup errors
                switch = {
                    trigger = $id$
                    1 = {
                        lroai_evaluate_building_government_administration = {
                            priority = lroai_current_priority
                        }
                    }
                    2 = {
                        lroai_evaluate_building_university = {
                            priority = lroai_current_priority
                        }
                    }
                    3 = {
                        lroai_evaluate_building_construction_sector = {
                            priority = lroai_current_priority
                        }
                    }
                    4 = {
                        lroai_evaluate_building_railway = {
                            priority = lroai_current_priority
                        }
                    }
                    5 = {
                        lroai_evaluate_building_port = {
                            priority = lroai_current_priority
                        }
                    }
                    6 = {
                        lroai_evaluate_building_barracks = {
                            priority = lroai_current_priority
                        }
                    }
                    7 = {
                        lroai_evaluate_building_naval_base = {
                            priority = lroai_current_priority
                        }
                    }
                }
            }

            # If conditions are met, re-set building type variable in a new format with this priority
            set_variable = {
                name = lroai_building_type_$id$_collected_data
                value = {

                    # Cell 1
                    value = {
                        value = lroai_current_priority
                        divide = 100
                    }

                    # Cell 2
                    add = lroai_current_priority

                    # Cell 4
                    add = 1000000

                    # Cell 5
                    if = {
                        limit = {
                            has_variable = lroai_building_type_$id$_collected_data
                        }
                        add = {
                            value = lroai_building_type_$id$_collected_data_5
                            multiply = 10000000
                        }
                    }
                }
            }

            # Set up variable to stop while loop
            set_local_variable = lroai_break_evaluation
        }

        # priority++;
        change_local_variable = {
            name = lroai_current_priority
            add = 1
        }
    }

    # If building evaluation is unsuccessful, but building type variable exists, ensure it contains only counter
    if = {
        limit = {
            NOT = {
                has_local_variable = lroai_break_evaluation
            }
            has_variable = lroai_building_type_$id$_collected_data
        }
        set_variable = {
            name = lroai_building_type_$id$_collected_data
            value = {
                value = lroai_building_type_$id$_collected_data_5
                multiply = 10000000
            }
        }
    }

    # Garbage collection
    remove_local_variable = lroai_current_priority
    remove_local_variable = lroai_break_evaluation
}

# For production buildings
lroai_evaluate_production_building = {

    # Get supply vs demand level of the good
    market = {
        $good$ = {
            root = {
                set_variable = {
                    name = lroai_evaluated_supply_vs_demand_level
                    value = {
                        value = prev.lroai_supply_vs_demand_level
                        subtract = $offset_supply$
                        round = yes
                        min = $priority_limit_supply$
                        max = 99
                    }
                }
            }
        }
    }

    if = { limit = { has_variable = lroai_building_type_$id$_collected_data lroai_building_type_$id$_collected_data_3 > 0}
        set_variable = {
            name = lroai_evaluated_productivity_level
            value = {
                # Cell 1
                value = 10
                add = var:lroai_median_building_productivity
                subtract = {
                    value = lroai_building_type_$id$_collected_data_3
                    divide = 10
                }
                subtract = $offset_productivity$
                round = yes
                min = $priority_limit_productivity$
                max = 99
            }
        }
    }
    else = {
        set_variable = {
            name = lroai_evaluated_productivity_level
            value = var:lroai_evaluated_supply_vs_demand_level
        }
    }

   set_variable = {
        name = temp_data
        value = 0
   }

    if = {
        limit = {
            var:lroai_evaluated_supply_vs_demand_level > 0
            var:lroai_evaluated_supply_vs_demand_level < 99
        }
        change_variable = {
            name = temp_data
            # Cell 1
            add = {

                #take the minimum of the two priority
                value = var:lroai_evaluated_supply_vs_demand_level
                max   = var:lroai_evaluated_productivity_level

                divide = 100
            }
        }
    }

    change_variable = {
        name = temp_data
        # Cell 2
        add = 0
    }

    if = { limit = { has_variable = lroai_building_type_$id$_collected_data}
        change_variable = {
            name = temp_data
            # Cell 3
            add = {
                value = lroai_building_type_$id$_collected_data_3
                multiply = 100
            }
        }

        change_variable = {
            name = temp_data
            # Cell 5
            add = {
                 value = lroai_building_type_$id$_collected_data_5
                 multiply = 10000000
             }
        }
    }

    set_variable = {
        name = lroai_building_type_$id$_collected_data
        value = var:temp_data
    }

    # Garbage collection
    remove_variable = temp_data
    remove_variable = lroai_evaluated_supply_vs_demand_level
    remove_variable = lroai_evaluated_productivity_level
}