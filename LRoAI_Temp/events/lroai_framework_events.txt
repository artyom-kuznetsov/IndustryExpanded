namespace = lroai_framework_events

# Called by on_monthly_pulse_country, but scope that called it doesn't matter, as there's no dependency on root scope
lroai_framework_events.1 = {
    type = country_event
    hidden = yes

    # We ensure this is called only once per day by checking global variable...
    trigger = {
        OR = {
            NOT = {
                has_global_variable = lroai_date_of_last_event_execution
            }
            NOT = {
                global_var:lroai_date_of_last_event_execution = game_date
            }
        }
    }

    immediate = {
        
        # ...that contains date of the last execution of this event
        set_global_variable = {
            name = lroai_date_of_last_event_execution
            value = game_date
        }

        # Make sure this event is actually called every day, e.g. if there are too few countries worldwide
        # for on_monthly_pulse_country to be distributed over every single day of the month.
        random_country = {
            trigger_event = {
                id = lroai_framework_events.1
                days = 1
            }
        }

        # Once per game
        lroai_set_date_of_next_iteration_for_all_countries = yes

        # Once per day
        lroai_refresh_list_of_compatibility_patches = yes

        # Once per year
        lroai_check_agriculture_resources_in_state_regions = yes
        
        # Country-specific actions happen in cycle with each iteration being (lroai_weeks_in_iteration * 7) days long.
        # Iteration start dates are distributed randomly and are not synchonized between different countries.
        every_country = {

            # If country is not allowed, it may have leftover variables, so we make sure these are cleared.
            if = {
                limit = {
                    lroai_is_country_allowed = no
                }
                lroai_clear_country_cycle_variables = yes
            }
            else = {

                # If country doesn't have an iteration date, we set a new one with the delay of iteration duration
                # minus up to one week to prevent iteration overlay if previous one was interrupted in the beginning.
                if = {
                    limit = {
                        NOT = {
                            has_variable = lroai_date_of_next_iteration
                        }
                    }
                    set_variable = {
                        name = lroai_date_of_next_iteration
                        value = {
                            value = game_date
                            add = {
                                integer_range = {
                                    min = {
                                        value = lroai_days_in_the_iteration
                                        subtract = 6
                                    }
                                    max = lroai_days_in_the_iteration
                                }
                            }
                        }
                    }
                }
                
                # It's time to start a new iteration.
                if = {
                    limit = {
                        var:lroai_date_of_next_iteration <= game_date
                    }

                    # This is then used in script value lroai_day_of_ongoing_iteration (starts with 1, not 0).
                    set_variable = {
                        name = lroai_date_of_next_iteration
                        value = {
                            value = game_date
                            add = lroai_days_in_the_iteration
                        }
                    }

                    # Country-specific actions are wrapped with an event in order to overwrite the root scope.
                    trigger_event = {
                        id = lroai_weekly_loop_events.2
                    }
                }
            }
        }
    }
}