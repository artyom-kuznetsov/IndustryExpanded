# Find a building type with highest priority + order pair and try to construct it
lroai_choose_building_type_to_construct = {


    # Set local variable that equals to highest priority, note that highest means lower number
    lroai_perform_for_every_building_type = {
        effect = 6 # lroai_compare_building_priority_with_current_highest
    }

    # If variable wasn't set, then there is nothing to construct
    if = {
        limit = {
            NOT = {
                has_local_variable = lroai_highest_building_priority
            }
        }
        lroai_clear_country_iteration_variables = yes
    }

    # Otherwise choose a building type with highest priority to construct
    else = {

        # If there are no building types with priority higher than 6 and we haven't tried special buildings yet, do it
        if = {
            limit = {
                local_var:lroai_highest_building_priority = 6
                NOT = {
                    has_variable = lroai_tried_special_buildings
                }
            }
            lroai_construct_special_buildings = yes
        }

        # Otherwise proceed with general buildings
        else = {

            # Create local variable list of building types with highest priority in form of $id$.$order$ array variable
            lroai_perform_for_every_building_type = {
                effect = 7 # lroai_add_to_list_of_buildings_with_highest_priority
            }

            # Find a building type with highest order in this list, ties are resolved by random
            random_in_local_list = {
                variable = lroai_buildings_with_highest_priority
                limit = {
                    NOT = {
                        any_in_local_list = {
                            variable = lroai_buildings_with_highest_priority
                            lroai_order_of_current_element < prev.lroai_order_of_current_element
                        }
                    }
                }

                # This building type would be the one we are going to construct
                lroai_perform_for_every_building_type = {
                    effect = 8 # lroai_choose_states_to_start_construction
                }
            }

            # Garbage collection
            clear_local_variable_list = lroai_buildings_with_highest_priority
        }

        # Garbage collection
        remove_local_variable = lroai_highest_building_priority

        # If construction of chosen building type failed to start for whatever reason, choose another one
        if = {
            limit = {
                NOT = {
                    has_local_variable = lroai_started_building_construction
                }
                lroai_free_construction_points > 0
            }
            lroai_choose_building_type_to_construct = yes
        }

        # Otherwise just schedule future constructions if there are building type with priorities left
        else = {

            # Clear successful construction flag
            remove_local_variable = lroai_started_building_construction

            # In rare cases even after constructing a dozen of building types there are still both free construction
            # points and some building types that were not yet processed, so we cycle through them all in one day.
            if = {
                limit = {
                    lroai_free_construction_points > 0
                }
                lroai_choose_building_type_to_construct = yes
            }
        }
    }
}

# Set local variable that equals to highest priority, note that highest means lower number
lroai_compare_building_priority_with_current_highest = {
    if = {
        limit = {
            has_variable = lroai_building_type_$id$_collected_data
            lroai_building_type_$id$_collected_data_1 > 0
            OR = {
                NOT = {
                    has_local_variable = lroai_highest_building_priority
                }
                local_var:lroai_highest_building_priority > lroai_building_type_$id$_collected_data_1
            }
        }
        set_local_variable = {
            name = lroai_highest_building_priority
            value = lroai_building_type_$id$_collected_data_1
        }
    }
}

# Create local variable list of building types with highest priority in form of $id$.$order$ array variable
lroai_add_to_list_of_buildings_with_highest_priority = {
    if = {
        limit = {
            has_variable = lroai_building_type_$id$_collected_data
            lroai_building_type_$id$_collected_data_1 > 0
            local_var:lroai_highest_building_priority = lroai_building_type_$id$_collected_data_1
        }
        add_to_local_variable_list = {
            name = lroai_buildings_with_highest_priority
            target = $id$.$order$
        }
    }
}

# We know what to construct now, but where?
lroai_choose_states_to_start_construction = {

    # Before we start, make an additional counter check cause something may have changed
    if = {
        limit = {
            lroai_check_if_counter_is_within_limit = {
                id = $id$
                counter = $counter$
                limit = $limit$
            }
        }

        # Set variable in every state with occupancy of building of current type
        every_scope_building = {
            limit = {
                is_building_type = $key$
                OR = {
                    level > 0
                    is_under_construction = yes
                }
            }
            state = {
                set_variable = {
                    name = lroai_building_type_occupied_levels
                    value = {
                        value = prev.level
                        multiply = prev.occupancy
                        min = 0.1
                    }
                }
            }
        }

        # If variable was not set, then there's no such building or it has no occupancy, so set variable as 0
        every_scope_state = {
            limit = {
                NOT = {
                    has_variable = lroai_building_type_occupied_levels
                }
            }
            set_variable = {
                name = lroai_building_type_occupied_levels
                value = 0
            }
        }

        # States from allocation lists are filtered by lroai_requirements_for_construction_in_state trigger, and in case
        # of branching being true all the states are also sorted by conditions like being incorporated or having enough
        # infrastructure. Then lists of filtered and states are passed to lroai_start_building_construction one by one.
        lroai_filter_and_sort_states_from_allocation_lists = {
            key = $key$
            id = $id$
            class = $class$
            counter = $counter$
            branching = $branching$
            allocate = $allocate$
            workforce = $workforce$
            limit = $limit$
            scaling = $scaling$
        }

        # Garbage collection
        every_scope_state = {
            remove_variable = lroai_building_type_occupied_levels
        }
    }

    # Set building type priority to 0 so we don't process it anymore in this iteration
    change_variable = {
        name = lroai_building_type_$id$_collected_data
        subtract = {
            value = lroai_building_type_$id$_collected_data_1
            divide = 100
        }
    }
}

# Branching algorithm used in lroai_filter_and_sort_states_from_allocation_lists. Splits input allocation list into
# a bunch of branch lists sorted by conditions below. Note that in the current implementation, if you have for example
# two different allocation lists, the result will be A1B1 A2B1 - A1B2 A2B2 - A1B3 A2B3 - A1B4 A2B4. Branch conditions
# are considered more important than allocation conditions, so states from all allocation lists will be reshuffled so
# that all the states that fit first branch conditions will be grouped, then all the states from second condition, etc.
# But inside of branch group the allocation order is preserved, all A1B1 states will be processed strictly before A2B1.
lroai_perform_branching_of_allocation_list = {
    every_in_list = {
        variable = lroai_building_type_$id$_allocation_$index_1$
        limit = {
            lroai_requirements_for_construction_in_state = {
                class = $class$
                workforce = $workforce$
            }
        }
        if = {
            limit = {
                is_incorporated = yes
                lroai_has_enough_infrastructure = yes
                lroai_has_enough_workforce = yes
            }
            root = {
                add_to_variable_list = {
                    name = lroai_building_type_$id$_branch_$index_1$
                    target = prev
                }
            }
        }
        else_if = {
            limit = {
                lroai_has_enough_infrastructure = yes
                lroai_has_enough_workforce = yes
            }
            root = {
                add_to_variable_list = {
                    name = lroai_building_type_$id$_branch_$index_2$
                    target = prev
                }
            }
        }
        else_if = {
            limit = {
                OR = {
                    AND = {
                        is_incorporated = yes
                        lroai_has_enough_workforce = yes
                    }
                    lroai_has_enough_infrastructure = yes
                }
            }
            root = {
                add_to_variable_list = {
                    name = lroai_building_type_$id$_branch_$index_3$
                    target = prev
                }
            }
        }
        else = {
            root = {
                add_to_variable_list = {
                    name = lroai_building_type_$id$_branch_$index_4$
                    target = prev
                }
            }
        }
    }
}

# Takes list of states as input, chooses in which one of them to start construction and queues 1 level of building
lroai_start_building_construction = {

    # If we got there, then construction is successful (for lroai_choose_building_type_to_construct)
    set_local_variable = {
        name = lroai_started_building_construction
        value = yes
        days = lroai_days_to_keep_short_variables
    }

    # Cycle through states in the list while we can
    while = {
        limit = {
            lroai_has_variable_list = {
                name = $states$
            }
            lroai_check_if_counter_is_within_limit = {
                id = $id$
                counter = $counter$
                limit = $limit$
            }
            lroai_free_construction_points > 1
        }

        # Take a random list that fits conditions below
        random_in_list = {
            variable = $states$
            limit = {
                save_temporary_scope_as = lroai_current_state
                root = {

                    # If economy of scaling applies to this building type
                    trigger_if = {
                        limit = {
                            $scaling$ = 1
                        }
                        OR = {

                            # Or there are no states with higher level in this list
                            NOT = {
                                any_in_list = {
                                    variable = $states$
                                    has_variable = lroai_building_type_occupied_levels
                                    var:lroai_building_type_occupied_levels > lroai_current_lroai_building_type_occupied_levels
                                }
                            }
                        }
                    }

                    # If economy of scaling does not apply
                    trigger_else = {

                        # Take a state with the lowest level of this building type in the list
                        NOT = {
                            any_in_list = {
                                variable = $states$
                                var:lroai_building_type_occupied_levels < lroai_current_lroai_building_type_occupied_levels
                            }
                        }
                    }

                    # Additional conditions to construct new buildings
                    OR = {

                        # If there is already some levels of the building in the state, we don't care
                        lroai_current_lroai_building_type_occupied_levels > 0

                        # For constructing buildings from scratch
                        OR = {

                            # Either this is a state with one of the highest available workforce in the entire country
                            any_scope_state = {
                                var:lroai_building_type_occupied_levels = 0
                                lroai_available_workforce > scope:lroai_current_state.lroai_available_workforce
                                count < lroai_states_for_new_buildings
                            }

                            # Or there are no states with higher available workforce in this list
                            NOT = {
                                any_in_list = {
                                    variable = $states$
                                    var:lroai_building_type_occupied_levels = 0
                                    lroai_available_workforce > scope:lroai_current_state.lroai_available_workforce
                                }
                            }
                        }
                    }
                }
            }

            # We'll need it here and there
            save_scope_as = lroai_current_state

            # We check if we managed to start construction by comparing number of queued levels in the queue before and
            # after using start_building_construction. Note about $id$ = 5 aka Port: while other buildings are allowed
            # to get constructed many times in the same state, ports are not due to their allocation conditions being
            # pretty complex (e.g. you don't need more than one port for just market access) but it would be expensive
            # to track properly and it's not a big deal, so we always build one port per state and don't check stuff
            # like queued levels because of this, we just always assume the construction is successful and move on.
            if = {
                limit = {
                    NOT = {
                        $id$ = 5 # Port
                    }
                }
                set_local_variable = {
                    name = lroai_construction_queue_num_queued_levels
                    value = root.construction_queue_num_queued_levels
                }
            }

            # This little line is everything we want, but many thousands of other lines are required to use it properly
            start_building_construction = $key$

            # Set cooldown for government buildings
            if = {
                limit = {
                    OR = {
                        $id$ = 1 # Government administration
                        $id$ = 2 # University
                        $id$ = 3 # Construction sector
                        $id$ = 5 # Port
                        $id$ = 6 # Barracks
                        $id$ = 7 # Naval base
                    }
                }
                root = {
                    lroai_renew_variable = {
                        name = lroai_$key$_cooldown
                        days = lroai_days_in_building_cooldown
                    }
                }
            }

            # We can't check how many levels of a building are queued in a state as well as how many points are left
            # before construction will end, so we roughly track it using state scope variable list of array variables.
            # This is important for workforce (hiring for new buildings) and railways. Progress is added in weekly loop.
            if = {
                limit = {
                    OR = {
                        $id$ = 5 # Port
                        local_var:lroai_construction_queue_num_queued_levels < root.construction_queue_num_queued_levels
                    }
                }

                # ---------------------------------------------------------------------------------------------------
                # lroai_ongoing_construction is an array variable, and lroai_ongoing_constructions is a list of them.
                # Search for "Cell distribution of lroai_ongoing_construction" in lroai_construction_values.txt
                # ---------------------------------------------------------------------------------------------------

                # Set up a new record of ongoing construction that we'll add into the list
                set_local_variable = {
                    name = lroai_ongoing_construction
                    value = {

                        # Cell 1
                        value = $id$
                        max = 9999
                        divide = 100

                        # Cell 2
                        add = {

                            # Construction sector and military buildings
                            if = {
                                limit = {
                                    OR = {
                                        $id$ = 3 # Construction sector
                                        $class$ = 3 # Military
                                    }
                                }
                                value = construction_cost_very_low
                            }

                            # Agriculture and "light" resources
                            else_if = {
                                limit = {
                                    OR = {
                                        AND = {
                                            $class$ = 4 # Resources
                                            $id$ <= 11 # "Light" resources
                                        }
                                        $class$ = 5 # Agriculture
                                    }
                                }
                                value = construction_cost_low
                            }

                            # Government, port, "heavy" resources
                            # Commented out due to medium being fallback
                            # else_if = {
                                # limit = {
                                    # OR = {
                                        # $class$ = 1 # Government
                                        # $id$ = 5 # Port
                                        # AND = {
                                        #     $class$ = 4 # Resources
                                        #     $id$ >= 12 # "Medium" resources
                                        # }
                                    # }
                                # }
                                # value = construction_cost_medium
                            # }

                            # First check if building is "very_high" cause there's no separate class with them
                            else_if = {
                                limit = {
                                    $id$ >= 44 # Range of building types with very high cost
                                    $id$ <= 48
                                }
                                value = construction_cost_very_high
                            }

                            # Then check if it's "high" building
                            else_if = {
                                limit = {
                                    OR = {
                                        $id$ = 4 # Railway
                                        $class$ = 6 # Industry
                                    }
                                }
                                value = construction_cost_high
                            }

                            # Fallback
                            else = {
                                value = construction_cost_medium
                            }

                            # Formatting
                            round = yes
                            max = 9999
                            multiply = 100
                        }

                        # Cell 3
                        add = 1000000
                    }
                }

                # If there's already such a element in the list with everything except count being the same, set local
                # variable equal to it and delete the element, so we group multiple levels in one element of the list.
                if = {
                    limit = {
                        lroai_has_variable_list = {
                            name = lroai_ongoing_constructions
                        }
                    }
                    random_in_list = {
                        variable = lroai_ongoing_constructions
                        limit = {
                            local_var:lroai_ongoing_construction = lroai_current_ongoing_constructions_element_without_count
                        }
                        set_local_variable = {
                            name = lroai_ongoing_construction
                            value = this
                        }
                        scope:lroai_current_state = {
                            remove_list_variable = {
                                name = lroai_ongoing_constructions
                                target = prev
                            }
                        }
                    }
                }

                # Cell 4
                change_local_variable = {
                    name = lroai_ongoing_construction
                    add = 10000000
                }

                # Add to the list
                add_to_variable_list = {
                    name = lroai_ongoing_constructions
                    target = local_var:lroai_ongoing_construction
                }

                # Garbage collection
                remove_local_variable = lroai_ongoing_construction
            }

            # Check if construction actually started
            if = {
                limit = {
                    NOT = {
                        $id$ = 5 # Port
                    }
                }

                # If number of queued levels changed, then probably yes
                if = {
                    limit = {
                        local_var:lroai_construction_queue_num_queued_levels < root.construction_queue_num_queued_levels
                    }

                    # Add a level to state scope variable to help in further decision making on where to construct
                    change_variable = {
                        name = lroai_building_type_occupied_levels
                        add = 1
                    }

                    # Add a level to building type counter
                    root = {
                        lroai_add_to_building_type_counter = {
                            counter = $counter$
                            value = 1
                        }
                    }

                    # Tracking of free arable land for agriculture buildings
                    if = {
                        limit = {
                            lroai_is_agriculture_building = {
                                class = $class$
                            }
                        }
                        if = {
                            limit = {
                                NOT = {
                                    has_variable = lroai_queued_agriculture_buildings
                                }
                            }
                            set_variable = {
                                name = lroai_queued_agriculture_buildings
                                value = 1
                            }
                        }
                        else = {
                            change_variable = {
                                name = lroai_queued_agriculture_buildings
                                add = 1
                            }
                        }
                    }

                    # Check if state is no longer suitable for construction
                    if = {
                        limit = {
                            OR = {

                                # Not enough infrastructure
                                AND = {
                                    $id$ = 4
                                    lroai_infrastructure_balance_value_with_ongoing_constructions >= 0
                                }

                                # Can't queue more levels of the building
                                NOT = {
                                    any_scope_building = {
                                        is_building_type = $key$
                                        can_queue_building_levels = 1
                                    }
                                }

                                # Workforce restrictions
                                NOR = {
                                    $workforce$ = 0
                                    lroai_available_workforce >= lroai_required_workforce
                                }

                                # No arable land for agriculture buildings
                                NOR = {
                                    NOT = {
                                        lroai_is_agriculture_building = {
                                            class = $class$
                                        }
                                    }
                                    AND = {
                                        free_arable_land > 0
                                        OR = {
                                            NOT = {
                                                has_variable = lroai_queued_agriculture_buildings
                                            }
                                            var:lroai_queued_agriculture_buildings < free_arable_land
                                        }
                                    }
                                }
                            }
                        }

                        # If any of above is true, remove the state from the list
                        root = {
                            remove_list_variable = {
                                name = $states$
                                target = prev
                            }
                        }
                    }
                }

                # If number of queued levels is the same, construction probably failed, remove the state from the list
                else = {
                    root = {
                        remove_list_variable = {
                            name = $states$
                            target = prev
                        }
                    }
                }

                # Garbage collection
                remove_local_variable = lroai_construction_queue_num_queued_levels
            }

            # For ports we always assume construction is successful so we add a level to the counter, but we still
            # remove the state from the list because we don't want to build more than one port at time in a state.
            else = {
                root = {
                    lroai_add_to_building_type_counter = {
                        counter = $counter$
                        value = 1
                    }
                    remove_list_variable = {
                        name = $states$
                        target = prev
                    }
                }
            }

            # Garbage collection
            clear_saved_scope = lroai_current_state
        }
    }
}