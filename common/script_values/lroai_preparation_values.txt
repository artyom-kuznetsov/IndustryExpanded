# tag : tag_lroai_building_construction_sector_expenses_per_point
#
# Approximation of the average construction points cost in the early game
# It will decrease overtime but lroai_revenue_factor_construction_military will take care of that
#
lroai_building_construction_sector_expenses_per_point = {
   if = {
        limit = { has_variable = lroai_previous_cost_per_construction_point}
        value = root.var:lroai_previous_cost_per_construction_point
   }
   else = {
        value = lroai_expected_ceiling_cost_per_construction_point
   }
}


# tag : tag_lroai_usage_of_construction_points_by_government_queue
#
# How many construction points is the public construction sector using
#
lroai_usage_of_construction_points_by_government_queue = {
    value = construction_queue_num_queued_government_levels
    multiply = lroai_construction_points_per_building

    min = 0
}
# tag : tag_lroai_usage_of_construction_points_by_private_queue
#
# How many construction points is the private construction sector using
#
lroai_usage_of_construction_points_by_private_queue = {
    value = construction_queue_num_queued_private_levels
    multiply = lroai_construction_points_per_building
    max = {
        value = lroai_construction_points_current
        multiply = lroai_private_construction_allocation_mult
    }
    min = 0
}


# tag : tag_lroai_private_construction_allocation_mult
#
# Depending on the law, give the private construction sector share
#
lroai_private_construction_allocation_mult =  {
    if = { limit = { has_law = law_type:law_traditionalism}
        value = 0.25
    }
    else_if = { limit = { has_law = law_type:law_agrarianism}
        value = 0.5
    }
    else_if = { limit = { has_law = law_type:law_interventionism}
        value = 0.5
    }
    else_if = { limit = { has_law = law_type:law_industry_banned}
        value = 0.5
    }
    else_if = { limit = { has_law = law_type:law_laissez_faire}
        value = 0.5
    }
    else_if = { limit = { has_law = law_type:law_laissez_faire}
        value = 0.75
    }
    else_if = { limit = { has_law = law_type:law_command_economy}
        value = 0.0
    }
    else_if = { limit = { has_law = law_type:law_cooperative_ownership}
        value = 0.35
    }
    else = {
        value = 0
    }
}


# tag : tag_lroai_free_construction_points
#
# How many construction points can the government use
# The goal is to never overfill the queue as LRoAI can't remove buildings from the queue
# To use just the amount of construction points we wants means that, if you don't put new factories in the queue,
# it can empty itself in a matter of weeks, meaning that the construction sector expenses are flexible
#
lroai_free_construction_points = {

    # how much construction points the public sector have
    value = lroai_construction_points_current
    multiply = {
        value = 1
        subtract = lroai_private_construction_allocation_mult
    }

    min = {
        value = lroai_construction_points_current
        subtract = lroai_usage_of_construction_points_by_private_queue
    }

    # With this, we no longer need to downsize construction sector, it'll only use as many points as we desire.
    max = lroai_construction_points_wanted_for_gov

    # Subtract construction points used in the government queue
    subtract = lroai_usage_of_construction_points_by_government_queue

    min = 0
}






lroai_day_of_ongoing_iteration = {
    value = 29
    subtract = var:lroai_date_of_next_iteration
    add = game_date
}

lroai_days_since_agriculture_resources_were_checked = {
    value = game_date
    subtract = global_var:lroai_date_of_last_check_of_agriculture_resources
}

lroai_max_iterations_since_production_downsizing = 5

lroai_base_construction_points = 5

lroai_construction_points_per_building = {
    value = modifier:country_max_weekly_construction_progress_add
    divide = {
        if = {
            limit = {
                has_variable = lroai_median_construction_efficiency
            }
            value = var:lroai_median_construction_efficiency
            divide = 10
        }
        else = {
            value = 1
            # add = modifier:state_construction_mult
            add = {
                value = {
                    every_scope_state = {
                        add = modifier:state_construction_mult
                    }
                }
                divide = {
                    every_scope_state = {
                        add = 1
                    }
                }
            }
            min = define:NEconomy|MIN_CONSTRUCTION_EFFICIENCY
        }
        min = 0.01
    }
    min = 0.5
    max = modifier:country_max_weekly_construction_progress_add
}

lroai_construction_points_current = {
    value = modifier:country_construction_add
    min = lroai_base_construction_points
}

lroai_construction_points_from_sectors_current = {
    value = lroai_construction_points_current
    subtract = lroai_base_construction_points
    min = 0
}

lroai_constructions_possible_with_current_points = {
    value = lroai_construction_points_current
    divide = lroai_construction_points_per_building
}

lroai_non_free_usage_of_construction_points_value = {
    value = lroai_construction_points_per_building
    max = {
        value = lroai_construction_points_current
        divide = {
            value = construction_queue_num_queued_levels
            min = 1
        }
    }

    # This max is above is for small countries
    # Imagine 14 construction point, one building in private and public
    # Without this max, lroai_non_free_usage_of_construction_points_value would return 14-15 and not 4
    # We can't add it to the original lroai_construction_points_per_building because else it gives a self feeding loop, and countries overbuild


    multiply = construction_queue_num_queued_levels
    subtract = lroai_base_construction_value
    min = 1
    max = lroai_construction_points_current
}

lroai_expenses_for_one_construction = {
    value = lroai_construction_points_per_building
    multiply = lroai_building_construction_sector_expenses_per_point
}


lroai_building_construction_sector_share_of_wages_in_expenses = 0.10

lroai_building_construction_sector_share_of_goods_in_expenses = {
    value = 1
    subtract = lroai_building_construction_sector_share_of_wages_in_expenses
    min = 0
    max = 1
}

lroai_max_percent_of_autonomous_construction_points = 0.90


lroai_unemployed_population = {
    value = state_population
    multiply = {
        value = state_unemployment_rate
        min = 0
        max = 1
    }
}

lroai_sufficient_occupancy = {
    value = 0.5
}

lroai_occupied_levels = {
    value = level
    multiply = {
        value = occupancy
        min = 0
        max = 1
    }
}

lroai_available_workforce = {
    if = {
        limit = {
            has_variable = lroai_available_workforce
        }
        value = var:lroai_available_workforce
    }
    else = {
        value = lroai_unemployed_population
    }
    subtract = {
        value = 0
        every_in_list = {
            variable = lroai_ongoing_constructions
            add = lroai_current_ongoing_constructions_element_4
        }
        multiply = 5000
    }
    min = 0
}

lroai_required_workforce = {
    value = 5000
}

lroai_sufficient_workforce = {
    value = 20000
}

lroai_army_power_projection = {
    value = modifier:country_army_power_projection_add
    multiply = {
        value = modifier:country_army_power_projection_mult
        add = 1
    }
}



lroai_infrastructure_balance_value = {
    value = infrastructure
    subtract = infrastructure_usage
}

lroai_infrastructure_balance_percent = {
    value = infrastructure
    divide = {
        value = infrastructure_usage
        min = 1
    }
}

lroai_infrastructure_with_ongoing_constructions = {
    value = infrastructure
    if = {
        limit = {
            any_scope_building = {
                is_building_type = building_railway
                is_under_construction = yes
            }
        }
        add = {
            if = {
                limit = {
                    any_scope_building = {
                        is_building_type = building_railway
                        level > 0
                    }
                }
                every_scope_building = {
                    limit = {
                        is_building_type = building_railway
                    }
                    value = lroai_infrastructure_per_level_of_railway
                }
                divide = {
                    value = 0
                    every_scope_building = {
                        limit = {
                            is_building_type = building_railway
                        }
                        add = 1
                    }
                    min = 1
                }
            }
            else = {
                if = {
                    limit = {
                        root = {
                            has_variable = lroai_building_type_4_collected_data
                            lroai_building_type_4_collected_data_4 > 0
                        }
                    }
                    value = 5
                    multiply = root.lroai_building_type_4_collected_data_4
                    add = 10
                }
                else = {
                    value = 20
                }
            }
            multiply = {
                if = {
                    limit = {
                        lroai_has_variable_list = {
                            name = lroai_ongoing_constructions
                        }
                    }
                    value = 0
                    every_in_list = {
                        variable = lroai_ongoing_constructions
                        limit = {
                            lroai_current_ongoing_constructions_element_1 = 4
                            lroai_current_ongoing_constructions_element_3 < 3
                        }
                        add = lroai_current_ongoing_constructions_element_4
                    }
                }
                else = {
                    value = 1
                }
            }
        }
    }
}

lroai_infrastructure_per_level_of_railway = {
    value = 0
    if = {
        limit = {
            has_active_production_method = pm_early_trains
        }
        add = 20
    }
    else_if = {
        limit = {
            has_active_production_method = pm_steam_trains
        }
        add = 25
    }
    else_if = {
        limit = {
            has_active_production_method = pm_electric_trains
        }
        add = 30
    }
    else_if = {
        limit = {
            has_active_production_method = pm_diesel_trains
        }
        add = 40
    }
}

lroai_infrastructure_balance_value_with_ongoing_constructions = {
    value = lroai_infrastructure_with_ongoing_constructions
    subtract = infrastructure_usage
}

lroai_infrastructure_balance_percent_with_ongoing_constructions = {
    value = lroai_infrastructure_with_ongoing_constructions
    divide = {
        value = infrastructure_usage
        min = 1
    }
}

lroai_tax_capacity_balance_value = {
    value = tax_capacity
    subtract = tax_capacity_usage
}

lroai_tax_capacity_balance_percent = {
    value = tax_capacity
    divide = {
        value = tax_capacity_usage
        min = 1
    }
}

lroai_taxes_lost_due_to_tax_capacity = {
    value = gdp
    multiply = {
        value = 1
        subtract = lroai_tax_capacity_balance_percent
        min = 0
        max = 1
    }
}

lroai_country_lost_taxes = {
    value = {
        every_scope_state = {
            add = lroai_taxes_lost_due_to_tax_capacity
        }
    }
    divide = {
        value = gdp
        min = 1
    }
}

lroai_tax_capacity_from_government_administration = {
    if = {
        limit = {
            has_active_production_method = pm_switch_boards
        }
        value = 30
    }
    else_if = {
        limit = {
            has_active_production_method = pm_vertical_filing_cabinets
        }
        value = 15
    }
    else_if = {
        limit = {
            has_active_production_method = pm_horizontal_drawer_cabinets
        }
        value = 10
    }
    else = {
        value = 5
    }
    multiply = level
    multiply = occupancy
}

lroai_productivity_without_scaling = {
    value = earnings
    divide = {
        value = 1
        add = {
            value = level
            subtract = define:NEconomy|ECONOMY_OF_SCALE_START_LEVEL
            add = 1
            max = root.modifier:building_economy_of_scale_level_cap_add
            divide = 100
        }
    }
}

lroai_productivity_without_half_economy_of_scale = {
    value = earnings
    divide = {
        value = 1
        add = {
            value = level
            subtract = define:NEconomy|ECONOMY_OF_SCALE_START_LEVEL
            add = 1
            max = root.modifier:building_economy_of_scale_level_cap_add
            divide = 100
            
            divide = 2
        }
    }
}

lroai_median_building_productivity = {
    if = {
        limit = {
            root = {
                has_variable = lroai_median_building_productivity
            }
        }
        value = root.var:lroai_median_building_productivity
    }
    else = {
        value = 0
    }
}

lroai_75_percent_of_average_productivity = {
    value = lroai_median_building_productivity
    multiply = 0.75
}

lroai_profit_per_occupied_level = {
    if = {
        limit = {
            lroai_occupied_levels > 0
        }
        value = weekly_profit
        divide = lroai_occupied_levels
    }
    else = {
        value = 0
    }
}

lroai_productivity_formatted = {
    value = earnings
    multiply = 10
}

lroai_current_priority = {
    value = local_var:lroai_current_priority
}

lroai_current_lroai_building_type_occupied_levels = {
    value = scope:lroai_current_state.var:lroai_building_type_occupied_levels
}
lroai_current_government_administration_level = {
    value = scope:lroai_current_state.var:lroai_building_government_administration_level
}

lroai_current_construction_sector_level = {
    value = scope:lroai_current_state.var:lroai_building_construction_sector_level
}

lroai_current_port_level = {
    value = scope:lroai_current_state.var:lroai_building_port_level
}

lroai_current_barracks_level = {
    value = scope:lroai_current_state.var:lroai_building_barracks_level
}

lroai_current_naval_base_level = {
    value = scope:lroai_current_state.var:lroai_building_naval_base_level
}

lroai_state_construction_sector_limit = {
    value = modifier:state_building_construction_sector_max_level_add
}
lroai_state_port_limit = {
    value = modifier:state_building_port_max_level_add
}
lroai_state_barracks_limit = {
    value = modifier:state_building_barracks_max_level_add
}
lroai_state_naval_base_limit = {
    value = modifier:state_building_naval_base_max_level_add
}

lroai_order_of_current_element = {
    value = this
    subtract = {
        value = this
        floor = yes
    }
    multiply = 100
    floor = yes
}

lroai_buildings_with_highest_priority_id = {
    value = this
    floor = yes
}

lroai_available_agriculture_resources_1 = {
    value = state_region.var:lroai_available_agriculture_resources
    divide = 100000
    floor = yes
    multiply = 100000
}

lroai_available_agriculture_resources_2 = {
    value = state_region.var:lroai_available_agriculture_resources
    subtract = {
        value = state_region.var:lroai_available_agriculture_resources
        divide = 100000
        floor = yes
        multiply = 100000
    }
    divide = 10000
    floor = yes
    multiply = 10000
}

lroai_available_agriculture_resources_3 = {
    value = state_region.var:lroai_available_agriculture_resources
    subtract = {
        value = state_region.var:lroai_available_agriculture_resources
        divide = 10000
        floor = yes
        multiply = 10000
    }
    divide = 1000
    floor = yes
    multiply = 1000
}

lroai_available_agriculture_resources_4 = {
    value = state_region.var:lroai_available_agriculture_resources
    subtract = {
        value = state_region.var:lroai_available_agriculture_resources
        divide = 1000
        floor = yes
        multiply = 1000
    }
    divide = 100
    floor = yes
    multiply = 100
}

lroai_available_agriculture_resources_5 = {
    value = state_region.var:lroai_available_agriculture_resources
    subtract = {
        value = state_region.var:lroai_available_agriculture_resources
        divide = 100
        floor = yes
        multiply = 100
    }
    divide = 10
    floor = yes
    multiply = 10
}

lroai_available_agriculture_resources_6 = {
    value = state_region.var:lroai_available_agriculture_resources
    subtract = {
        value = state_region.var:lroai_available_agriculture_resources
        divide = 10
        floor = yes
        multiply = 10
    }
}

lroai_building_data_overflow_protection = {
    value = 10000
    subtract = {
        value = prev.lroai_occupied_levels
        round = yes
    }
}
